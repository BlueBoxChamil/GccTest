
# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

# 获取构建目录中的可执行文件
    - name: Get executable name
      id: get_exec_name
      run: |
        # 检查构建目录中以可执行文件为后缀的文件
        EXEC_NAME=$(ls ${{github.workspace}}/build | grep -E '.*\.(out|exe|bin)$' | head -n 1 || echo "Project")
        echo "EXEC_NAME=$EXEC_NAME" >> $GITHUB_ENV  # 将 EXEC_NAME 环境变量传递给后续步骤

    # 列出构建目录中的文件，帮助调试
    - name: List files in build directory
      run: ls -la ${{github.workspace}}/build

    # 运行动态获取的可执行文件
    - name: Run executable
      run: |
        echo "Running executable: $EXEC_NAME"
        EXEC_PATH="${{github.workspace}}/build/$EXEC_NAME"
        echo "Full executable path: $EXEC_PATH"
        # 确保路径正确，避免多余的斜杠
        $EXEC_PATH


