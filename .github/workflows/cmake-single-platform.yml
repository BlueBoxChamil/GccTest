# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

     # 获取可执行文件的名称（使用 TARGET_NAME）
    - name: Get executable name from CMake
      id: get_exec_name
      run: |
        # 创建临时的 CMake 脚本并获取可执行文件名
        echo "get_target_property(EXEC_NAME ${PROJECT_NAME} LOCATION)" > get_target_name.cmake
        echo "message(STATUS \"Executable name: ${EXEC_NAME}\")" >> get_target_name.cmake
        cmake -S . -B ${{github.workspace}}/build -P get_target_name.cmake
        
        # 从 CMake 输出中获取可执行文件的路径
        EXEC_NAME=$(cat ${{github.workspace}}/build/exec_name.txt)
        echo "EXEC_NAME=$EXEC_NAME" >> $GITHUB_ENV  # 将 EXEC_NAME 环境变量传递给后续步骤
        
        if [ -z "$EXEC_NAME" ]; then
          echo "No executable name found, using default Project"
          echo "EXEC_NAME=Project" >> $GITHUB_ENV
        fi

    # 运行可执行文件
    - name: Run executable
      run: |
        echo "Running executable: $EXEC_NAME"
        ./${{github.workspace}}/build/$EXEC_NAME  # 使用动态获取的可执行文件名称

